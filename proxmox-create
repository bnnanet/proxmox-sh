#!/bin/sh
set -e
set -u

if test -e .env.secret; then
    # shellcheck disable=SC1091
    . ./.env.secret || true
fi
if test -e .env; then
    # shellcheck disable=SC1091
    . ./.env
fi
if test -e ~/.config/proxmox/current.env; then
    # shellcheck disable=SC1090
    . ~/.config/proxmox/current.env || true
fi

if test -z "${PROXMOX_HOST-}" ||
    test -z "${PROXMOX_TOKEN_ID-}" ||
    test -z "${PROXMOX_TOKEN_SECRET-}" ||
    test -z "${PROXMOX_TARGET_NODE-}"; then

    {
        # shellcheck disable=2088
        echo "~/.config/proxmox/current.env should contain values like these:"
        echo "(./.env.secret or ./.env may also be used) "
        echo ""
        echo "    # Config"
        echo "    PROXMOX_HOST='pve1.example.net:8006'"
        echo "    PROXMOX_TARGET_NODE='pve1'"
        echo "    PROXMOX_BRIDGE='vmbr0'"
        echo "    PROXMOX_SEARCH_SUFFIX='.localdomain'"
        echo "    PROXMOX_NAMESERVER='172.17.0.1'"
        echo ""
        echo "    # URL, File or String"
        echo "    PROXMOX_AUTHORIZED_KEYS='https://github.com/me.keys'"
        echo ""
        echo "    # Secrets"
        echo "    PROXMOX_TOKEN_ID='<user>@<strategy>!<token-name>'"
        echo "    PROXMOX_TOKEN_SECRET='00000000-0000-4000-8000-000000000000'"
        echo ""
    } >&2
    exit 1
fi

my_auth="Authorization: PVEAPIToken=${PROXMOX_TOKEN_ID}=${PROXMOX_TOKEN_SECRET}"
my_base_url="https://${PROXMOX_HOST}/api2/json"
my_curl="curl --max-time 15 --fail-with-body -sSL"

fn_discover() { (
    echo "${my_base_url}/"
    ${my_curl} -H "${my_auth}" \
        "${my_base_url}/" |
        jq '.'
); }

fn_status() { (
    echo "${my_base_url}/nodes/${PROXMOX_TARGET_NODE}/status"
    ${my_curl} -H "${my_auth}" \
        "${my_base_url}/nodes/${PROXMOX_TARGET_NODE}/status" |
        jq '.'
); }

fn_lxc_last_id() { (
    #echo "${my_base_url}/nodes/${PROXMOX_TARGET_NODE}/lxc"
    my_lxcs="$(
        ${my_curl} -H "${my_auth}" \
            "${my_base_url}/nodes/${PROXMOX_TARGET_NODE}/lxc"
    )"
    my_lxc_last_id="$(
        echo "${my_lxcs}" |
            jq -r '.data[].vmid' | sort | tail -n 1
    )"
    my_lxc_next_id="$((my_lxc_last_id + 1))"
    echo "${my_lxc_next_id}"
); }

fn_resources_next_index() { (
    my_prefix="${1}"
    my_zero="${2:-000}"

    # Or https://192.168.0.101:8006/api2/json/cluster/nextid ?
    #echo "${my_base_url}/cluster/resources"
    my_resources="$(
        ${my_curl} -H "${my_auth}" \
            "${my_base_url}/cluster/resources"
    )"
    my_resource_ids="$(
        echo "${my_resources}" |
            jq -r '.data[].vmid' |
            grep "^${my_prefix}" ||
            echo "${my_prefix}${my_zero}"
    )"
    my_resource_last_id="$(
        echo "${my_resource_ids}" |
            sort -u |
            tail -n 1
    )"

    # Goal: 1101001 => 002
    # 0. 1101001 => 1
    my_resource_index="$((my_resource_last_id % 1000))"
    # 2. 1 => 9002
    # it's OVER 9000!! (just to keep leading 0s in the string)
    my_resource_index="$((my_resource_index + 9001))"
    # 3. 9002 => 002
    my_resource_index="$(
        echo "${my_resource_index}" | cut -c"2-"
    )"

    echo "${my_resource_index}"
); }

fn_ssh_keys() { (
    my_key_uri="${1:-}"

    if test -z "${my_key_uri}"; then
        if ! command -v ssh-pubkey > /dev/null; then
            {
                echo ""
                echo "ERROR"
                echo "        'ssh-pubkey' does not exist and no ssh pubkey was given"
                echo ""
            } >&2

            return 1
        fi

        my_keys="$(
            ssh-pubkey 2> /dev/null
        )"
    fi

    my_keys="${my_key_uri}"
    case "${my_key_uri}" in
        http:*)
            echo "please use 'https://' for ssh public key urls"
            return 1
            ;;
        https:*)
            my_keys="$(
                ${my_curl} "${my_key_uri}"
            )"
            ;;
        *)
            if test -e "${my_key_uri}"; then
                my_keys="$(
                    cat "${my_key_uri}"
                )"
            fi
            ;;
    esac

    printf '%s' "${my_keys}" | grep -E '^(ssh|ecdsa)-[a-zA-Z0-9-]+ AAA' || true
); }

fn_create_lxc() { (
    # https://192.168.0.3:8006/api2/json/nodes/pve1/lxc

    my_vlan="${1}"
    my_unit="${2}"
    my_hostname="${3}"
    my_pubkeys="${4}"

    my_password="$(
        xxd -l12 -ps /dev/urandom |
            xxd -r -ps |
            base64 |
            tr -d = |
            tr + - |
            tr / _
    )"

    my_search_suffix="${PROXMOX_SEARCH_SUFFIX:-}"
    my_nameserver="${PROXMOX_NAMESERVER:-}"
    my_bridge="${PROXMOX_BRIDGE:-vmbr0}"

    my_tmpl_vol=cephfs0
    my_os_tmpl=vztmpl/ubuntu-22.04-standard_22.04-1_amd64.tar.zst
    #my_os_tmpl=vztmpl/alpine-3.17-ssh+webi_20221129_amd64.tar.xz
    my_fs_size=8
    my_fs_pool=pool0
    my_fs_opts=lazytime
    my_mp0_pool=pool0
    my_mp0_size='0.1'
    my_mp0_mnt='/mnt/storage'
    my_mp0_opts='lazytime;nodev;nosuid'
    my_net="$(
        fn_id_to_net "${my_vlan}" "${my_unit}"
    )"

    my_task_result="$(
        ${my_curl} -H "${my_auth}" \
            -X POST "${my_base_url}/nodes/${PROXMOX_TARGET_NODE}/lxc" \
            --data-urlencode "start=1" \
            --data-urlencode "vmid=${my_vlan}${my_unit}" \
            --data-urlencode "hostname=${my_hostname}" \
            --data-urlencode "unprivileged=1" \
            --data-urlencode "password=${my_password}" \
            --data-urlencode "ssh-public-keys=${my_pubkeys}" \
            --data-urlencode "ostemplate=${my_tmpl_vol}:${my_os_tmpl}" \
            --data-urlencode "rootfs=${my_fs_pool}:${my_fs_size},mountoptions=${my_fs_opts}" \
            --data-urlencode "mp0=${my_mp0_pool}:${my_mp0_size},mp=${my_mp0_mnt},mountoptions=${my_mp0_opts}" \
            --data-urlencode "cores=2" \
            --data-urlencode "cpulimit=50" \
            --data-urlencode "memory=512" \
            --data-urlencode "swap=0" \
            --data-urlencode "net0=name=eth0,bridge=${my_bridge},tag=${my_vlan},${my_net},rate=91" \
            --data-urlencode "searchdomain=${my_vlan}${my_search_suffix}" \
            --data-urlencode "nameserver=${my_nameserver}"
    )"
    #{"success":1,"data":"UPID:pve1:000C38ED:01978844:640D7BB1:vzcreate:101:root@pam:"}

    my_task_id="$(
        echo "${my_task_result}" |
            jq -r '.data' |
            grep '^UPID:' || true
    )"

    if test "${my_task_id}" = "null"; then
        echo ""
        echo "${my_task_result}" |
            jq '.'
        echo ""
        echo "Error: Create failed"
        echo ""
        exit 1
    fi

    echo "${my_task_id}"
); }

# Example
# vlan=1109, suffix=142
# mac = 00:52:11:09:01:42
# gw = 10.11.9.1
fn_id_to_net() { (
    # assumed to be always 4-digits (1101-1199)
    my_vlan="${1}"
    # assumed to be always 3-digits (101-199)
    my_unit="${2}"

    # make 4 digits (to avoid 008 being octal)
    my_num="1${my_unit}"
    # remove leading "1"
    my_num="$((my_num - 1000))"

    my_ip="$((my_num + 100))"
    my_vlan_01="$(
        echo "${my_vlan}" | cut -c-2
    )"
    my_vlan_02="$(
        echo "${my_vlan}" | cut -c3-
    )"
    my_vlan_2="$((my_vlan_02 + 0))"

    my_unit_01="$(
        echo "0${my_unit}" | cut -c-2
    )"
    my_unit_02="$(
        echo "0${my_unit}" | cut -c3-
    )"

    printf "hwaddr=00:52:%s:%s:%s:%s," \
        "${my_vlan_01}" "${my_vlan_02}" "${my_unit_01}" "${my_unit_02}"
    printf "ip=10.%s.%s.%s/24," \
        "${my_vlan_01}" "${my_vlan_2}" "${my_ip}"
    printf "gw=10.%s.%s.1" \
        "${my_vlan_01}" "${my_vlan_2}"
); }

fn_wait_status() { (
    my_task_id_raw="${1}"
    my_check_count="${2:-1}"

    my_task_id="$(
        printf '%s' "${my_task_id_raw}" |
            xxd -plain |
            tr -d '\n' |
            sed 's/\(..\)/%\1/g'
    )"

    my_task_result="$(
        ${my_curl} -H "${my_auth}" \
            "${my_base_url}/nodes/${PROXMOX_TARGET_NODE}/tasks/${my_task_id}/status"
    )"

    my_task_status="$(
        printf '%s' "${my_task_result}" |
            jq -r '.data.status'
    )"
    echo "Status: ${my_task_status}"

    if test "${my_task_status}" = "running"; then
        if test "${my_check_count}" -ge 20; then
            echo "Error: tried 20 times"
            return 1
        fi

        sleep 1
        my_check_count="$((my_check_count + 1))"
        fn_wait_status "${my_task_id_raw}" "${my_check_count}"
        return 0
    fi

    echo "${my_task_result}" | jq '.'
); }

# TODO
# https://192.168.0.3:8006/api2/json/pools
# https://192.168.0.3:8006/api2/json/nodes
# https://192.168.0.3:8006/api2/json/nodes/pve1/network?type=any_bridge

main() { (
    my_vlan="${1:-}"
    my_hostname="${2:-}"
    my_pubkeys="${3:-}"

    my_pubkeys="${4:-}"
    if test -z "${my_pubkeys}"; then
        my_pubkeys="${PROXMOX_AUTHORIZED_KEYS:-}"
    fi

    my_pubkeys="$(
        fn_ssh_keys "${my_pubkeys}"
    )"

    if test -z "${my_vlan:-}" ||
        test -z "${my_hostname:-}"; then

        if test -n "${my_vlan}"; then
            echo ""
            printf "Finding next available IP for vlan${my_vlan}...\n"
            my_vlan_1="$(
                echo "${my_vlan}" | cut -c-2
            )"
            my_vlan_1=$((my_vlan_1 + 0))

            my_vlan_2="$(
                echo "${my_vlan}" | cut -c3-
            )"
            my_vlan_2=$((my_vlan_2 + 0))

            my_next_unit="$(
                fn_resources_next_index "${my_vlan}"
            )"
            my_next_ip="$((my_next_unit + 100))"
            echo "    10.${my_vlan_1}.${my_vlan_2}.${my_next_ip}/24"
        else
            my_vlan="1101"
            my_vlan_1="11"
            my_vlan_2="1"
            my_next_unit="001"
            my_next_ip="101"
        fi

        my_next_id=$((my_next_unit + 0))
        my_domain_suffix="${PROXMOX_SEARCH_SUFFIX:-.localdomain}"
        my_hostname="example${my_next_id}.${my_vlan}${my_domain_suffix}"

        echo ""
        echo "USAGE"
        echo "    proxmox-create <vlan> <hostname> [ssh-pubkey-file-url-or-string]"
        echo ""
        echo "EXAMPLE"
        echo "    proxmox-create ${my_vlan} ${my_hostname} ~/.ssh/id_rsa.pub"
        echo ""
        echo "DEFAULT SSH KEYS (only key comments are shown, for brevity)"
        printf '%s' "${my_pubkeys}" |
            cut -d' ' -f3 |
            sort -u |
            while read -r my_comment; do
                echo "    ${my_comment}"
            done
        echo ""
        exit 1
    fi

    printf "Finding next available id for VLAN %s... " "${my_vlan}"
    my_next_unit="$(
        fn_resources_next_index "${my_vlan}"
    )"
    echo "${my_next_unit}"

    my_task_id="$(
        fn_create_lxc "${my_vlan}" "${my_next_unit}" "${my_hostname}" "${my_pubkeys}"
    )"
    echo "Waiting for ${my_task_id}..."
    fn_wait_status "${my_task_id}"
); }

main "${@-}"
